<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\Component\Utility\Html;
use \Drupal\Component\Utility\UrlHelper;
use Drupal\block\Entity\Block;
use Drupal\Core\Link;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function tateandlyle_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for field templates.
 */
function tateandlyle_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#field_type'] == 'entity_reference' &&  ($variables['element']['#entity_type'] == 'paragraph' || $variables['element']['#entity_type'] == 'node')) {
    $entities = $variables['element']['#items']->referencedEntities();
    $entity = array_shift($entities);
    array_splice($suggestions, 1, 0, 'field__paragraph__field_entity_reference_' . $entity->bundle());
  }
}

/**
 * Implements template_preprocess_block().
 */
function tateandlyle_preprocess_block(&$variables) {
  $bundle = '';
  $block = '';
  if (isset($variables['elements']['#base_plugin_id'])
    && ($variables['elements']['#base_plugin_id'] == 'continue_or_browse'
    || $variables['elements']['#base_plugin_id'] == 'facet_block')) {
    $bundle = $variables['elements']['#base_plugin_id'];
  }
  if (isset($variables['elements']['content']['#block_content'])) {
    $block = $variables['elements']['content']['#block_content'];
    $bundle = $variables['elements']['content']['#block_content']->bundle();

    $bundle_class = str_replace('_', '-', $bundle);
    if (isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = Html::cleanCssIdentifier('block--' . $bundle_class);
      $variables['attributes']['data-bundle-class'] = $bundle_class;
    }
    $variables['id'] = '';
    if (isset($variables['elements']['#id'])) {
      $variables['id'] = $variables['elements']['#id'];
    }
  }
  if (!empty($bundle)) {
    include_once "preprocess/block.inc";
    if (function_exists('tal_preprocess_block_' . $bundle)) {
      $variables = call_user_func('tal_preprocess_block_' . $bundle, $variables, $block);
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function tateandlyle_preprocess_paragraph(&$variables) {
  $bundle = $variables['paragraph']->getType();

  // Call preprocessor function of different block types.
  include_once "preprocess/paragraph.inc";
  if (function_exists('tal_preprocess_paragraph_' . $bundle)) {
    $variables = call_user_func('tal_preprocess_paragraph_' . $bundle, $variables, $variables['paragraph']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for the page title template.
 */
function tateandlyle_preprocess_page_title(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  $bundle = ['ingredient', 'landing_page'];
  $field_in_banner = '';
  if (!empty($node)) {
    if ($node->hasField('field_in_banner')) {
      $field_in_banner = $node->get('field_in_banner');
    }
    if ($node && in_array($node->bundle(), $bundle)) {
      if ($node->hasField('field_hide_title') && $node->get('field_hide_title')->value) {
        $variables['title_attributes']['class'][] = 'hide';
      }
    }
    elseif (!empty($field_in_banner)) {
      $variables['title_attributes']['class'][] = 'hide';
    }
  }

}

/**
 * Implements hook_preprocess_HOOK() for the node.
 */
function tateandlyle_preprocess_node(&$variables) {
  $bundle = $variables['node']->getType();

  // Call preprocessor function of different block types.
  include_once "preprocess/node.inc";
  if (function_exists('tal_preprocess_node_' . $bundle)) {
    $variables = call_user_func('tal_preprocess_node_' . $bundle, $variables, $variables['node']);
  }
}

/**
 * Implements hook_preprocess_field_HOOK() for the node.
 */
function tateandlyle_preprocess_field(&$variables) {
  $variables['field_unique_id'] = '';
  if ($variables['field_name'] == "field_at_tab_content1" || $variables['field_name'] == "field_at_tab_content2" || $variables['field_name'] == "field_in_accordion_items") {
    $element = $variables['element'];
    $entity = $element['#object'];
    $variables['field_unique_id'] = $entity->getEntityTypeId() . $entity->id() . $variables['field_name'];
  }

  if ($variables['field_name'] == 'field_ingredients_content') {
    if (!empty($variables['items'])) {
      foreach ($variables['items'] as $key => $val) {
        $values = $val['content']['#paragraph']->toArray();
        $variables['items'][$key]['type'] = $values['type'][0]['target_id'];
      }
    }
  }
  // We need to place active class on the like if current page belongs to it.
  if ($variables['field_name'] == 'field_left_link' || $variables['field_name'] == 'field_right_link') {
    // Get the current query parameters.
    $path = \Drupal::request()->getUri();
    $parameters = UrlHelper::parse($path);
    foreach ($variables['items'] as $id => &$item) {
      if (!$item['content']['#url']->isExternal()) {
        $item['content']['#url']->setOption('query', array('active' => $id, 'field' => $variables['field_name']));
      }
      // Set active class.
      if (isset($parameters['field']) && isset($parameters['active'])) {
        if ($parameters['field'] == $variables['field_name'] && $parameters['active'] == $id) {
          $item['attributes']->addClass('active');
        }
      }
    }
  }
  // Add ids and classes to History tab contents.
  if ($variables['field_name'] == 'field_history_tab') {
    $variables['attributes']['class'] = 'tab-content';
    foreach ($variables['items'] as $id => &$item) {
      // Add bootstrap tab classes.
      if ($id == 0) {
        $item['attributes']->addClass(array('tab-pane', 'fade', 'in', 'active'));
      }
      else {
        $item['attributes']->addClass(array('tab-pane', 'fade'));
      }
      // Set unique ids to each tab content.
      $item['attributes']->setAttribute('id', 'history-tab-nav-' . $item['content']['#paragraph']->id());
    }
  }
  if ($variables['element']['#field_type'] == 'entity_reference' &&  $variables['element']['#entity_type'] == 'paragraph') {
    $entities = $variables['element']['#items']->referencedEntities();
    $entity = array_shift($entities);
    $bundle = $entity->bundle();
    // Call preprocessor function of different block types.
    include_once "preprocess/block.inc";
    if (function_exists('tal_preprocess_block_' . $bundle)) {
      $variables = call_user_func('tal_preprocess_block_' . $bundle, $variables, $entity);
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function tateandlyle_preprocess_menu(&$variables) {
  $variables['search_menu'] = [];
  if (isset($variables['menu_name']) && $variables['menu_name'] == 'mobile-menu') {
    $block = Block::load('exposedformsearchsearch_page_2');
    $block_content = \Drupal::entityManager()
      ->getViewBuilder('block')
      ->view($block);
    $variables['search_menu'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array("search-menu-mobile"),
      ),
      "element-content" => $block_content,
      '#weight' => 0,
    );
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function tateandlyle_preprocess_breadcrumb(&$variables) {
  $home_link = Link::createFromRoute(t('Home'), '<front>');
  $breadcrumb = $variables['breadcrumb'];
  // We don't need "Home" breadcrumb if no further trails are available.
  if (!empty($breadcrumb)) {
    array_unshift($breadcrumb, $home_link);
    $variables['breadcrumb'] = $breadcrumb;
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function tateandlyle_preprocess_views_view_unformatted(&$variables) {
  $view = $variables['view'];
  $rows = $variables['rows'];
  $id = $view->id();
  $current_uri = \Drupal::request()->getRequestUri();
  if ($id == 'article_categories') {
    foreach ($rows as $id => $row) {
      $uri = '/articles/' . $row['content']['#taxonomy_term']->id();
      $variables['rows'][$id]['attributes'] = new Attribute();
      $variables['rows'][$id]['attributes']->addClass('views-row');
      if ($uri == $current_uri) {
        $variables['rows'][$id]['attributes']->addClass('active-row');
      }
    }
  }
}
