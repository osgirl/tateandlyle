<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function tateandlyle_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for field templates.
 */
function tateandlyle_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#field_type'] == 'entity_reference' &&  ($variables['element']['#entity_type'] == 'paragraph' || $variables['element']['#entity_type'] == 'node')) {
    $entities = $variables['element']['#items']->referencedEntities();
    $entity = array_shift($entities);
    array_splice($suggestions, 1, 0, 'field__paragraph__field_entity_reference_' . $entity->bundle());
  }
}

/**
 * Implements template_preprocess_block().
 */
function tateandlyle_preprocess_block(&$variables) {
  $bundle = '';
  $block = '';
  if (isset($variables['elements']['#base_plugin_id'])
    && ($variables['elements']['#base_plugin_id'] == 'continue_or_browse'
    || $variables['elements']['#base_plugin_id'] == 'facet_block')) {
    $bundle = $variables['elements']['#base_plugin_id'];
  }
  if (isset($variables['elements']['content']['#block_content'])) {
    $block = $variables['elements']['content']['#block_content'];
    $bundle = $variables['elements']['content']['#block_content']->bundle();

    $bundle_class = str_replace('_', '-', $bundle);
    if (isset($variables['attributes']['class'])) {
      $variables['attributes']['class'] = Html::cleanCssIdentifier('block--' . $bundle_class);
      $variables['attributes']['data-bundle-class'] = $bundle_class;
    }
    $variables['id'] = $variables['elements']['#id'];
  }
  if (!empty($bundle)) {
    include_once "preprocess/block.inc";
    if (function_exists('tal_preprocess_block_' . $bundle)) {
      $variables = call_user_func('tal_preprocess_block_' . $bundle, $variables, $block);
    }
  }
}

/**
 * Implements hook_preprocess_paragraph().
 */
function tateandlyle_preprocess_paragraph(&$variables) {
  $bundle = $variables['paragraph']->getType();

  // Call preprocessor function of different block types.
  include_once "preprocess/paragraph.inc";
  if (function_exists('tal_preprocess_paragraph_' . $bundle)) {
    $variables = call_user_func('tal_preprocess_paragraph_' . $bundle, $variables, $variables['paragraph']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for the page title template.
 */
function tateandlyle_preprocess_page_title(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node && $node->bundle() == 'ingredient') {
    if ($node->get('field_hide_title')->value) {
      $variables['title_attributes']['class'][] = 'hide';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for the node.
 */
function tateandlyle_preprocess_node(&$variables) {
  $bundle = $variables['node']->getType();

  // Call preprocessor function of different block types.
  include_once "preprocess/node.inc";
  if (function_exists('tal_preprocess_node_' . $bundle)) {
    $variables = call_user_func('tal_preprocess_node_' . $bundle, $variables, $variables['node']);
  }
}

/**
 * Implements hook_preprocess_field_HOOK() for the node.
 */
function tateandlyle_preprocess_field(&$variables) {
  $variables['field_unique_id'] = '';
  if ($variables['field_name'] == "field_at_tab_content1" || $variables['field_name'] == "field_at_tab_content2" || $variables['field_name'] == "field_in_accordion_items") {
    $element = $variables['element'];
    $entity = $element['#object'];
    $variables['field_unique_id'] = $entity->getEntityTypeId() . $entity->id() . $variables['field_name'];
  }

  if ($variables['element']['#field_type'] == 'entity_reference' &&  $variables['element']['#entity_type'] == 'paragraph') {
    $entities = $variables['element']['#items']->referencedEntities();
    $entity = array_shift($entities);
    $bundle = $entity->bundle();
    // Call preprocessor function of different block types.
    include_once "preprocess/block.inc";
    if (function_exists('tal_preprocess_block_' . $bundle)) {
      $variables = call_user_func('tal_preprocess_block_' . $bundle, $variables, $entity);
    }
  }
}
