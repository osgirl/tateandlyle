<?php
/**
 * @file
 * Code for the T&L Tweaks module.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_form_alter().
 */
function tl_tweaks_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  if ($form_id == "contact_message_contact_us_form") {
    if (isset($_GET['field_identifier'])) {
      if (isset($form['field_contact_identifier'])) {
        foreach ($_GET['field_identifier'] as $id) {
          $form['field_contact_identifier']['widget']['0']['value']['#default_value'] .= $id . '|';
        }
      }
      $form['field_contact_identifier']['#attributes']['class'][] = 'hidden';
    }

    // Add Required fields prefix.
    $form['#prefix'] = '<div class="tl-form-fields-required"><sup>*</sup>' . t('required fields') . '</div>';
  }

  if (($form_id == "node_page_edit_form") || ($form_id == "node_form_edit_form")) {
    if (isset($form['field_main_content'])) {
      $form['field_main_content']['widget']['add_more']['#access'] = TRUE;
    }
    if (isset($form['field_touts'])) {
      $form['field_touts']['widget']['add_more']['#access'] = TRUE;
    }
    if (isset($form['field_sidebar'])) {
      $form['field_sidebar']['widget']['add_more']['#access'] = TRUE;
    }
    foreach ($form['field_sidebar']['widget'] as $key => $item) {
      if (is_numeric($key)) {
        $form['field_sidebar']['widget'][$key]['subform']['field_popup']['widget']['add_more']['#access'] = TRUE;
      }
    }
  }

  foreach (entity_get_bundles()['contact_message'] as $key => $contact_message) {
    $form_id = 'contact_message_' . $key . '_form';
    if ($contact_message['label'] != 'Personal contact form') {
      if ($form['#form_id'] == $form_id) {
        $url = Url::fromUserInput('/');
        $form['actions']['submit']['#suffix'] = "<span class='cancel_button'>" . \Drupal::l(t('Cancel'), $url) . "</span>";
        unset($form['actions']['preview']);
        if (!empty(\Drupal::config('tl_tweaks.settings')->get($key))) {
          $form['actions']['submit']['#value'] = \Drupal::config('tl_tweaks.settings')->get($key);
        }
        if (isset($_GET['sub'])) {
          if (isset($form['field_message'])) {
            $form['field_message']['widget']['0']['value']['#default_value'] = $_GET['sub'];
          }
        }
      }
    }
  }

  if (($form['#form_id'] == 'node_form_edit_form') || ($form['#form_id'] == 'node_form_form')) {
    unset($form['field_form']['widget']['#options']['personal']);
  }

  if ($form_id == 'token_login_form') {
    // Return without executing if the functionality is not enabled.
    if (!\Drupal::config('simplesamlphp_auth.settings')->get('activate')) {
      return;
    }

    $label = Drupal::config('simplesamlphp_auth.settings')->get('login_link_display_name');

    $form['simplesamlphp_auth_login_link'] = array(
      '#markup' => \Drupal::l($label, new Url('simplesamlphp_auth.saml_login', array(), array(
        'attributes' => array(
          'class' => array('simplesamlphp-auth-login-link'),
        ),
      ))),
    );
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function tl_tweaks_page_attachments_alter(&$page) {
  $page['#attached']['library'][] = 'tl_tweaks/tl_tweaks';
}

/**
 * Implements hook_page_attachments().
 */
function tl_tweaks_page_attachments(array &$attachments) {
  global $base_url;
  $page_path = \Drupal::service('path.current')->getPath();
  $page_alias = \Drupal::service('path.alias_manager')->getAliasByPath($page_path);
  if ($page_alias == "/thank-you") {
    if (isset($_SERVER['HTTP_REFERER'])) {
      $alias = str_replace($base_url, "", $_SERVER['HTTP_REFERER']);
      $path = Url::fromUserInput($alias)->getInternalPath();
      $node_id = str_replace("node/", "", $path);
      if (is_numeric($node_id)) {
        $node = node_load($node_id);
        if ($node->getType() == "form") {
          if ($node->get('field_form')->getValue()[0]['target_id'] == "file_access") {
            if ($node->get('field_file')->isEmpty() != "1'") {
              $file_id = $node->get('field_file')->getValue()[0]['target_id'];
              $file = file_load($file_id);
              $file_path = $file->url($rel = canonical, $options = array());
              print '<a href="' . $file_path . '" download id="download" hidden></a>';
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function tl_tweaks_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  if (($is_front) && (\Drupal::request()->getRequestUri() == "/")) {
    $breadcrumb->addLink(Link::createFromRoute("", '<none>'));
  }
}

/**
 * Implements hook_node_update().
 */
function tl_tweaks_node_update($node) {
  \Drupal\Core\Cache\Cache::invalidateTags($node->getCacheTags());
}
