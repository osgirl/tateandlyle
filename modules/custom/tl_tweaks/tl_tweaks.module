<?php
/**
 * @file
 * Code for the T&L Tweaks module.
 */

use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_form_alter().
 */
function tl_tweaks_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $roles = \Drupal::currentUser()->getRoles($exclude_locked_roles = FALSE);
  if (in_array('content_approver', $roles)) {
    if (($form['moderation_state']['widget']['0']['#default_value'] == 'needs_review') || ($form['moderation_state']['widget']['0']['#default_value'] == 'published') || ($form['moderation_state']['widget']['0']['#default_value'] == 'archived')) {
      $form['moderation_state']['widget']['0']['#options']['needs_review'] = "Reject";
    }
  }

  if ($form_id == "user_register_form") {
    $form['account']['notify']['#default_value'] = TRUE;
  }

  if (($form_id == "views_exposed_form") && (\Drupal::service('path.current')->getPath() == "/admin/contact-messages")) {
    $form['created']['#type'] = 'date';
    $form['created_1']['#type'] = 'date';
  }

  if ($form_id == "search_block_form") {
    $action = $form['#action'];
    $form['#action'] = str_replace("/node", "", $action);
  }

  if (($form_id == "views_form_content_page_1") && (\Drupal::currentUser()->id() != 1)) {
    unset($form['header']['node_bulk_form']['action']['#options']['node_delete_action']);
  }

  if (($form_id == "node_page_edit_form") || ($form_id == "node_form_edit_form") || ($form_id == 'node_media_item_edit_form')) {
    $node = $form_state->getFormObject()->getEntity();
    $current_language = \Drupal::languageManager()->getCurrentLanguage($type = 'language_content')->getId();
    $node_state = $node->getTranslation($current_language)->get('moderation_state')->getValue()[0]['target_id'];
    if (($node_state != 'archived') && (\Drupal::currentUser()->id() != 1)) {
      unset($form['actions']['delete']);
      $form['#attached']['library'][] = 'tl_tweaks/tl_tweaks_node_form';
    }
  }

  if (($form['#form_id'] == 'node_form_form') || ($form['#form_id'] == 'node_form_edit_form') || ($form['#form_id'] == 'node_page_form') || ($form['#form_id'] == 'node_page_edit_form') || ($form['#form_id'] == 'node_media_item_form') || ($form['#form_id'] == 'node_media_item_edit_form')) {

    // Show image text field only for touts.
    foreach ($form['field_intro_area']['widget'] as $key => $image_text) {
      if (is_numeric($key)) {
        unset($form['field_intro_area']['widget'][$key]['subform']['field_image_text']);
      }
    }
    foreach ($form['field_main_content']['widget'] as $key => $image_text) {
      if (is_numeric($key)) {
        unset($form['field_main_content']['widget'][$key]['subform']['field_image_text']);
      }
    }

    // Make slide type default content if it's in main content.
    foreach ($form['field_main_content']['widget'] as $key => $slide) {
      if (is_numeric($key)) {
        $form['field_main_content']['widget'][$key]['subform']['field_slide_type']['widget']['#default_value'] = 0;
        unset($form['field_main_content']['widget'][$key]['subform']['field_slide_type']['widget']['#options'][1]);
      }
    }
    // Make slide type default content if it's in sidebar.
    foreach ($form['field_sidebar']['widget'] as $key => $slide) {
      if (is_numeric($key)) {
        $form['field_sidebar']['widget'][$key]['subform']['field_slide_type']['widget']['#default_value'] = 1;
        unset($form['field_sidebar']['widget'][$key]['subform']['field_slide_type']['widget']['#options'][0]);
      }
    }
  }

  if ($form_id == "contact_message_contact_us_form") {
    if (isset($_POST['field_identifier'])) {
      if ($form['field_contact_identifier'] !== NULL) {
        foreach ($_POST['field_identifier'] as $id) {
          $option = explode(" | ", Html::escape($id));
          $form['field_contact_identifier']['widget']['0']['value']['#default_value'] .= $option[0] . '|';
        }
      }
      $form['field_contact_identifier']['#attributes']['class'][] = 'hidden';
    }

    // Add Required fields prefix.
    $form['#prefix'] = '<div class="tl-form-fields-required"><sup>*</sup>' . t('required fields') . '</div>';
  }

  if (($form_id == "node_page_edit_form") || ($form_id == "node_form_edit_form")) {
    if (isset($form['field_main_content'])) {
      $form['field_main_content']['widget']['add_more']['#access'] = TRUE;
    }
    if (isset($form['field_touts'])) {
      $form['field_touts']['widget']['add_more']['#access'] = TRUE;
    }
    if (isset($form['field_sidebar'])) {
      $form['field_sidebar']['widget']['add_more']['#access'] = TRUE;
    }
    foreach ($form['field_sidebar']['widget'] as $key => $item) {
      if (is_numeric($key)) {
        $form['field_sidebar']['widget'][$key]['subform']['field_popup']['widget']['add_more']['#access'] = TRUE;
      }
    }
    foreach ($form['field_main_content']['widget'] as $key => $item) {
      if (is_numeric($key)) {
        $form['field_main_content']['widget'][$key]['subform']['field_contact']['widget']['add_more']['#access'] = TRUE;
      }
    }
    foreach ($form['field_touts']['widget'] as $key => $item) {
      if (is_numeric($key)) {
        $form['field_touts']['widget'][$key]['subform']['field_popup']['widget']['add_more']['#access'] = TRUE;
      }
    }
  }

  foreach (entity_get_bundles()['contact_message'] as $key => $contact_message) {
    $form_id = 'contact_message_' . $key . '_form';
    if ($contact_message['label'] != 'Personal contact form') {
      if ($form['#form_id'] == $form_id) {
        if (isset($form['field_form_entity_id'])) {
          $form_node_id = \Drupal::routeMatch()->getRawParameter('node');
          $form_node = node_load($form_node_id);
          $form['field_form_entity_id']['widget']['0']['target_id']['#default_value'] = $form_node;
          $form['field_form_entity_id']['#attributes']['class'][] = 'hidden';
        }
        $url = Url::fromUserInput('/');
        $form['actions']['submit']['#suffix'] = "<span class='cancel_button'>" . \Drupal::l(t('Cancel'), $url) . "</span>";
        unset($form['actions']['preview']);
        if (!empty(\Drupal::config('tl_tweaks.settings')->get($key))) {
          $form['actions']['submit']['#value'] = \Drupal::config('tl_tweaks.settings')->get($key);
        }
        if (isset($_GET['sub'])) {
          if (isset($form['field_message'])) {
            $form['field_message']['widget']['0']['value']['#default_value'] = Html::escape($_GET['sub']);
          }
        }
      }
    }
  }

  if (($form['#form_id'] == 'node_form_edit_form') || ($form['#form_id'] == 'node_form_form')) {
    unset($form['field_form']['widget']['#options']['personal']);
  }

  if ($form_id == 'token_login_form') {
    // Return without executing if the functionality is not enabled.
    if (!\Drupal::config('simplesamlphp_auth.settings')->get('activate')) {
      return;
    }

    $label = Drupal::config('simplesamlphp_auth.settings')->get('login_link_display_name');

    $form['simplesamlphp_auth_login_link'] = array(
      '#markup' => \Drupal::l($label, new Url('simplesamlphp_auth.saml_login', array(), array(
        'attributes' => array(
          'class' => array('simplesamlphp-auth-login-link'),
        ),
      ))),
    );
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function tl_tweaks_page_attachments_alter(&$page) {
  $page['#attached']['library'][] = 'tl_tweaks/tl_tweaks';
}

/**
 * Implements hook_page_attachments().
 */
function tl_tweaks_page_attachments(array &$attachments) {
  global $base_url;
  $page_path = \Drupal::service('path.current')->getPath();
  $page_alias = \Drupal::service('path.alias_manager')->getAliasByPath($page_path);
  if ($page_alias == "/thank-you") {
    if (isset($_SERVER['HTTP_REFERER'])) {
      $alias = str_replace($base_url, "", $_SERVER['HTTP_REFERER']);
      $path = Url::fromUserInput($alias)->getInternalPath();
      $node_id = str_replace("node/", "", $path);
      if (is_numeric($node_id)) {
        $node = node_load($node_id);
        if ($node->getType() == "form") {
          if ($node->get('field_form')->getValue()[0]['target_id'] == "file_access") {
            if ($node->get('field_file')->isEmpty() != "1'") {
              $file_id = $node->get('field_file')->getValue()[0]['target_id'];
              $file = file_load($file_id);
              $file_path = $file->url($rel = canonical, $options = array());
              print '<a target ="_blank" href="' . $file_path . '" id="download" hidden></a>';
            }
          }
        }
      }
    }
  }
  if (\Drupal::currentUser()->id() != 1) {
    $args = explode("/", $page_path);
    if (($args[0] == "") && ($args[1] == "node") && (is_numeric($args[2])) && ($args[3] == "translations")) {
      $attachments['#attached']['library'][] = 'tl_tweaks/tl_tweaks_node_form_translations';
    }
  }
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function tl_tweaks_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  if (($is_front) && (\Drupal::request()->getRequestUri() == "/")) {
    $breadcrumb->addLink(Link::createFromRoute("", '<none>'));
  }
}

/**
 * Implements hook_views_query_alter().
 */
function tl_tweaks_views_query_alter($view, $query) {
  $where = $query->where['1']['conditions'];
  foreach ($where as $key => $value) {
    if (strpos($value['field'], 'contact_message.created >= ') !== FALSE) {
      $substr = str_replace("contact_message.created >= ", "", $value['field']);
      unset($query->where['1']['conditions'][$key]);
      $query->addWhere("1", "contact_message.created", $value = $substr, $operator = ">=");
    }
    if (strpos($value['field'], 'contact_message.created <= ') !== FALSE) {
      $substr = str_replace("contact_message.created <= ", "", $value['field']);
      unset($query->where['1']['conditions'][$key]);
      $substr = $substr + '86340';
      $query->addWhere("1", "contact_message.created", $value = $substr, $operator = "<=");
    }
  }
}


/**
 * Implements hook_library_info_alter().
 */
function tl_tweaks_library_info_alter(&$libraries, $extension) {
  // Use Additional Methods js from https.
  if ($extension == 'clientside_validation_jquery' && isset($libraries['jquery.validate'])) {
    if (!file_exists($libraries['jquery.validate']['js']['js/lib/jquery.validate.js'])) {
      unset($libraries['jquery.validate']['js']['http://cdn.jsdelivr.net/jquery.validation/1.14.0/additional-methods.min.js']);
      $libraries['jquery.validate']['js']['https://cdn.jsdelivr.net/jquery.validation/1.14.0/additional-methods.min.js'] = ['type' => 'external'];
    }
  }
}
